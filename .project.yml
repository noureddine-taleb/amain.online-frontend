- PRPL : 
    - Push: (or preload) the most important resources
    - Render: the initial route as soon as possible
    - Pre-cache: remaining assets
    - Lazy load: other routes and non-critical assets

TODO :
    - Study web dev practices 
    - progressive enhancement (notification, badge, bg sync ...)
    - enable mongo monit
    - add chart dashboard
    - disable errors until press submit
    - animation look noisy
    - add more helpfull info to project table
    - Make content seo friendly
    - Use pipes instead of function in view 
    - NgZone
    - TrackBy
    - https://www.npmjs.com/package/webpack-bundle-analyzer
    - Switch to tailwind 
    - Brotli compression
    - Cache responses in nginx
    - Use critical Webpack plugging 
    - Instruments app with user timing api
    - Pappeteer for automation
    - Ngmaterial
    - Async pipe 
    - Onpush change detection in some components 
    - verify registered users

    - 11ty
    - Nodejs serverless
    - Covid19.ca.gov lighthouse 
    - Static site generator for angular (Angular scully)
    - Pagespeed insights
    - Tensorflow js
    - Worker
    - Webassembly
    - Google search console 
    - Infinite scroll instead of pagination 
    - preserve view state with urls (sharing)

    - IMP:
        - badge of n of new bill on user profile icon
        - make compress algo more intellegente (access sub folders)
    - FIX:

IN PROGRESS :
    - infinite scroll
    - Ngrx

    - progressive enhancement
    - Unit tests
    - travis ci

DONE :
    - style is not loaded directly when navigate to dashboard 
    - custom pipe
    - async pipe
    - overlay shadow for text
    - implement graphql
    - preload resources
    - better i18n support( translate site to en and add i18n attr > xi18n > translate blocks)
    - compress assets on server to improve pr
    - implement performance budgeting
    - reduce CLS on first page load
    - performance (lighthouse) for front page
    - Angular quick links for prefetching 
    - extractCss option
    - Defer css/js load 
    - Leverage angular build api
    - Use visibility with errs to mitigate CLS
    - Use template el 
    - Put dashboard on a separate module 
    - Put auth on a separate module 
    - Improve web vitals metrics (CLS)
    - Codes split
    - Lazy load components 
    - Upgrade to angular 10
    - Check evergreen google bot in logs
    - Test shdow dom in ng
    - Add stuck/total quantity field to report 
    - unsubscribe from obs when you finish
    - partial offline support
    - cache google analytics
    - reload bills after payment
    - performance opt
    - remove jquery from bootstrap
    - meta and title for each page
    - robots
    - use html element to store 'typed' data
    - Buil ARIA
    - show units in number input field billForm/projectForm/transactionForm
    - integrate unit into billpdf/projectList/billList
    - add unit to project list
    - add is payed in the bill table 
    - move repeated html to separate components
    - animation
    - beter ux (make password visible on demand)
    - meaning full lablels in buttons
    - Translation pdf and app
    - Collect web vitals
    - Limit img size on desk
    - Add creator field to collections 
    - Hidden field in transaction for projectID
    - A way for use to know he enter negative num in transaction 
    - Autocomplete attr
    - Use units with ng pipes 
    - Use float num ng pipes 
    - focus on reliability and robustness
    - light house suggestion
    - accessibility:
        - check label[for] == input[id]
        - add name to input
        - input[type]
        - check for attr usage
        - required translation
        - change buttons to a on navigation in auth components
        - check button,a,div usage
    - reset forms after success
    - dismiss payment form after success
    - file input is without style
    - remove old angular fa package
    - deprecate angular fa icons and use native ones
    - use URL.revokeObjectURL after you call URL.createObjectURL
    - access any browser api using window
    - remove '?' if no qs
    - strong typed return in services (not obs) to avoid adrifting between server and browser
    - use native types in ts ex ==> string, object ...
    - get user req is not init
    - fix ssr errors
    - translate to arabe
    - define models
    - define home route
    - img problem xss
    - undraw images in forms
    - pagination
    - user profile
    - propagate ui elements throgh out the app [alerts, spinner, error messages, progress bars]
    - show loader as placeholder when data doesnt arrived yet
    - write all conf in host.ts and spread it in env file
    - add pdf of bills add download
    - add payment form to bills form
    - add loader whenever you send some data to server
    - when you register a user redirect to login page
    - show notification on success
    - progress bar to upload file
    - fix file upload bug still show err
    - allow space in name
    - logout button
    - terms and conditions check box
    - connect to db
    - make resource models
    - make basic UI
    - error/feedback messages

POTENTIAL BUGS :
    - change the way we get project id in transaction component
    - the way we get file object on sign up component
    - find a way to bind close modal event to revoke url in bill component

COMPLEMENT :
    - access location
    - terms and conditions page
    - resource res should be of type of models
    - lint and code style
    - dont show form errors on first load
    - gravatar
    - support social media auth
    - captcha
    - make it pretty at the very end
    - support live chat with ws (handled by node)
    - e2e/karma testing
    - ci/branch features
    - online payment (cmi)
    - sms phone verification
    - utms
    - google analytics
    - ads
    - tawk.to
    - amp
    - use unDraw open source illustrations
    - service worker (workbox)
